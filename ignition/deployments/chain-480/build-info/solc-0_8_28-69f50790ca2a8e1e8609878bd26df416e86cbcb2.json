{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-69f50790ca2a8e1e8609878bd26df416e86cbcb2",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/WorldIDVerifier.sol": "project/contracts/WorldIDVerifier.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/WorldIDVerifier.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title WorldIDVerifier\n * @dev Contrato para verificación de World ID de usuarios\n * @notice Mantiene la lógica de verificación separada para fácil mantenimiento\n */\ncontract WorldIDVerifier is Ownable, ReentrancyGuard {\n    \n    // Estados de verificación\n    enum VerificationStatus {\n        NotVerified,    // Usuario no verificado\n        Pending,        // Verificación en proceso\n        Verified,       // Usuario verificado\n        Revoked         // Verificación revocada\n    }\n    \n    struct UserVerification {\n        address userAddress;\n        string worldIdHash;        // Hash del World ID (para privacidad)\n        VerificationStatus status;\n        uint256 verifiedAt;\n        uint256 expiresAt;         // Opcional: fecha de expiración\n        string metadata;           // Metadatos adicionales (opcional)\n    }\n    \n    // Mapeos\n    mapping(address => UserVerification) public userVerifications;\n    mapping(string => address) public worldIdToAddress; // worldIdHash => address\n    mapping(address => bool) public isVerified;\n    \n    // Configuración\n    uint256 public verificationExpiry = 365 days; // 1 año por defecto\n    bool public allowExpiredVerifications = true;\n    \n    // Eventos\n    event UserVerified(\n        address indexed user,\n        string indexed worldIdHash,\n        uint256 verifiedAt,\n        uint256 expiresAt\n    );\n    \n    event VerificationRevoked(\n        address indexed user,\n        string indexed worldIdHash,\n        uint256 revokedAt\n    );\n    \n    event VerificationExpired(\n        address indexed user,\n        string indexed worldIdHash,\n        uint256 expiredAt\n    );\n    \n    event VerificationExpiryUpdated(uint256 newExpiry);\n    event ExpiredVerificationsToggled(bool allowed);\n    \n    // Errores\n    error UserAlreadyVerified(address user);\n    error UserNotVerified(address user);\n    error WorldIdAlreadyUsed(string worldIdHash);\n    error UserVerificationExpired(address user);\n    error InvalidWorldIdHash(string worldIdHash);\n    error UnauthorizedAccess();\n    \n    constructor(address initialOwner) Ownable(initialOwner) {}\n    \n    /**\n     * @dev Verifica un usuario con World ID\n     * @param user Dirección del usuario a verificar\n     * @param worldIdHash Hash del World ID del usuario\n     * @param metadata Metadatos adicionales (opcional)\n     */\n    function verifyUser(\n        address user,\n        string memory worldIdHash,\n        string memory metadata\n    ) public onlyOwner nonReentrant {\n        // Validaciones\n        if (bytes(worldIdHash).length == 0) revert InvalidWorldIdHash(worldIdHash);\n        if (isVerified[user]) revert UserAlreadyVerified(user);\n        if (worldIdToAddress[worldIdHash] != address(0)) {\n            revert WorldIdAlreadyUsed(worldIdHash);\n        }\n        \n        // Calcular fechas\n        uint256 verifiedAt = block.timestamp;\n        uint256 expiresAt = verifiedAt + verificationExpiry;\n        \n        // Crear verificación\n        UserVerification memory verification = UserVerification({\n            userAddress: user,\n            worldIdHash: worldIdHash,\n            status: VerificationStatus.Verified,\n            verifiedAt: verifiedAt,\n            expiresAt: expiresAt,\n            metadata: metadata\n        });\n        \n        // Actualizar mapeos\n        userVerifications[user] = verification;\n        worldIdToAddress[worldIdHash] = user;\n        isVerified[user] = true;\n        \n        emit UserVerified(user, worldIdHash, verifiedAt, expiresAt);\n    }\n    \n    /**\n     * @dev Verifica múltiples usuarios en lote (para eficiencia)\n     */\n    function verifyUsersBatch(\n        address[] calldata users,\n        string[] calldata worldIdHashes,\n        string[] calldata metadata\n    ) external onlyOwner nonReentrant {\n        require(\n            users.length == worldIdHashes.length && \n            users.length == metadata.length,\n            \"Arrays length mismatch\"\n        );\n        \n        for (uint256 i = 0; i < users.length; i++) {\n            verifyUser(users[i], worldIdHashes[i], metadata[i]);\n        }\n    }\n    \n    /**\n     * @dev Revoca la verificación de un usuario\n     */\n    function revokeVerification(address user) external onlyOwner {\n        UserVerification storage verification = userVerifications[user];\n        \n        if (verification.status != VerificationStatus.Verified) {\n            revert UserNotVerified(user);\n        }\n        \n        // Actualizar estado\n        verification.status = VerificationStatus.Revoked;\n        isVerified[user] = false;\n        \n        emit VerificationRevoked(user, verification.worldIdHash, block.timestamp);\n    }\n    \n    /**\n     * @dev Verifica si un usuario está verificado y no ha expirado\n     */\n    function isUserVerified(address user) external view returns (bool) {\n        UserVerification memory verification = userVerifications[user];\n        \n        if (verification.status != VerificationStatus.Verified) {\n            return false;\n        }\n        \n        // Verificar expiración\n        if (block.timestamp > verification.expiresAt) {\n            if (!allowExpiredVerifications) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    /**\n     * @dev Obtiene información completa de verificación de un usuario\n     */\n    function getUserVerification(address user) \n        external \n        view \n        returns (UserVerification memory) \n    {\n        return userVerifications[user];\n    }\n    \n    /**\n     * @dev Verifica si una dirección está asociada a un World ID específico\n     */\n    function isWorldIdVerified(string memory worldIdHash) \n        external \n        view \n        returns (bool) \n    {\n        address user = worldIdToAddress[worldIdHash];\n        if (user == address(0)) return false;\n        \n        return this.isUserVerified(user);\n    }\n    \n    /**\n     * @dev Obtiene la dirección asociada a un World ID\n     */\n    function getAddressByWorldId(string memory worldIdHash) \n        external \n        view \n        returns (address) \n    {\n        return worldIdToAddress[worldIdHash];\n    }\n    \n    /**\n     * @dev Actualiza el tiempo de expiración de las verificaciones\n     */\n    function setVerificationExpiry(uint256 newExpiry) external onlyOwner {\n        verificationExpiry = newExpiry;\n        emit VerificationExpiryUpdated(newExpiry);\n    }\n    \n    /**\n     * @dev Permite o no el uso de verificaciones expiradas true by default\n     */\n    function setAllowExpiredVerifications(bool allowed) external onlyOwner {\n        allowExpiredVerifications = allowed;\n        emit ExpiredVerificationsToggled(allowed);\n    }\n    \n}\n"
      }
    }
  }
}